"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const i18n_1 = require("@kbn/i18n");
const react_1 = tslib_1.__importDefault(require("react"));
const react_apollo_1 = require("react-apollo");
const functional_1 = require("../../functional");
const get_filter_bar_1 = require("./get_filter_bar");
exports.FilterBarQuery = ({ autorefreshInterval, autorefreshIsPaused, dateRangeStart, dateRangeEnd, updateQuery, }) => (react_1.default.createElement(react_apollo_1.Query, { pollInterval: autorefreshIsPaused ? undefined : autorefreshInterval, query: get_filter_bar_1.getFilterBarQuery, variables: { dateRangeStart, dateRangeEnd } }, ({ loading, error, data }) => {
    if (loading) {
        return react_1.default.createElement(functional_1.FilterBarLoading, null);
    }
    if (error) {
        return i18n_1.i18n.translate('xpack.uptime.filterBar.errorMessage', {
            values: { message: error.message },
            defaultMessage: 'Error {message}',
        });
    }
    const { filterBar } = data;
    return react_1.default.createElement(functional_1.FilterBar, { filterBar: filterBar, updateQuery: updateQuery });
}));
