"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const i18n_1 = require("@kbn/i18n");
const react_1 = require("@kbn/i18n/react");
const react_2 = tslib_1.__importStar(require("react"));
const helper_1 = require("../../lib/helper");
exports.MonitorCharts = ({ checkDomainLimits, danger, durationDomainLimits, monitorChartData: { durationArea, durationLine, status }, primary, secondary, }) => (react_2.default.createElement(react_2.Fragment, null,
    react_2.default.createElement(eui_1.EuiFlexGroup, null,
        react_2.default.createElement(eui_1.EuiFlexItem, null,
            react_2.default.createElement(eui_1.EuiTitle, { size: "xs" },
                react_2.default.createElement("h4", null,
                    react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.uptime.monitorCharts.monitorDuration.titleLabel", defaultMessage: "Monitor Duration ms", description: "The 'ms' is an abbreviation for milliseconds." }))),
            react_2.default.createElement(eui_1.EuiPanel, { style: { maxWidth: 520, maxHeight: 220 } },
                react_2.default.createElement(eui_1.EuiSeriesChart, { margins: { left: 60, right: 40, top: 10, bottom: 40 }, width: 500, height: 200, xType: eui_1.EuiSeriesChartUtils.SCALE.TIME, xCrosshairFormat: "YYYY-MM-DD hh:mmZ", yDomain: durationDomainLimits },
                    react_2.default.createElement(eui_1.EuiAreaSeries, { color: secondary, name: i18n_1.i18n.translate('xpack.uptime.monitorCharts.monitorDuration.series.durationRangeLabel', {
                            defaultMessage: 'Duration range',
                        }), data: durationArea.map(({ x, yMin, yMax }) => ({
                            x,
                            y0: helper_1.convertMicrosecondsToMilliseconds(yMin),
                            y: helper_1.convertMicrosecondsToMilliseconds(yMax),
                        })), curve: "curveBasis" }),
                    react_2.default.createElement(eui_1.EuiLineSeries, { color: primary, name: i18n_1.i18n.translate('xpack.uptime.monitorCharts.monitorDuration.series.meanDurationLabel', {
                            defaultMessage: 'Mean duration',
                        }), data: durationLine.map(({ x, y }) => ({
                            x,
                            y: helper_1.convertMicrosecondsToMilliseconds(y),
                        })) })))),
        react_2.default.createElement(eui_1.EuiFlexItem, null,
            react_2.default.createElement(eui_1.EuiTitle, { size: "xs" },
                react_2.default.createElement("h4", null,
                    react_2.default.createElement(react_1.FormattedMessage, { id: "xpack.uptime.monitorCharts.checkStatus.title", defaultMessage: "Check status" }))),
            react_2.default.createElement(eui_1.EuiPanel, { style: { maxWidth: 520, maxHeight: 220 } },
                react_2.default.createElement(eui_1.EuiSeriesChart, { margins: { left: 60, right: 40, top: 10, bottom: 40 }, width: 500, height: 200, xType: eui_1.EuiSeriesChartUtils.SCALE.TIME, xCrosshairFormat: "YYYY-MM-DD hh:mmZ", stackBy: "y", yDomain: checkDomainLimits },
                    react_2.default.createElement(eui_1.EuiAreaSeries, { name: i18n_1.i18n.translate('xpack.uptime.monitorCharts.checkStatus.series.upCountLabel', {
                            defaultMessage: 'Up count',
                        }), data: status.map(({ x, up }) => ({ x, y: up })), curve: "curveBasis", color: primary }),
                    react_2.default.createElement(eui_1.EuiAreaSeries, { name: i18n_1.i18n.translate('xpack.uptime.monitorCharts.checkStatus.series.downCountLabel', {
                            defaultMessage: 'Down count',
                        }), data: status.map(({ x, down }) => ({ x, y: down })), color: danger })))))));
