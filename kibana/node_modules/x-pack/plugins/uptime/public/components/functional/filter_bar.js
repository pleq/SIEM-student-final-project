"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// @ts-ignore No typings for EuiSearchBar
const eui_1 = require("@elastic/eui");
const i18n_1 = require("@kbn/i18n");
const react_1 = tslib_1.__importDefault(require("react"));
const search_schema_1 = require("./search_schema");
const SEARCH_THRESHOLD = 2;
exports.FilterBar = ({ filterBar: { names, ports, ids, schemes }, updateQuery, }) => {
    // TODO: add a factory function + type for these filter options
    const filters = [
        {
            type: 'field_value_toggle_group',
            field: 'monitor.status',
            items: [
                {
                    value: 'up',
                    name: i18n_1.i18n.translate('xpack.uptime.filterBar.filterUpLabel', {
                        defaultMessage: 'Up',
                    }),
                },
                {
                    value: 'down',
                    name: i18n_1.i18n.translate('xpack.uptime.filterBar.filterDownLabel', {
                        defaultMessage: 'Down',
                    }),
                },
            ],
        },
        // TODO: add health to this select
        {
            type: 'field_value_selection',
            field: 'monitor.id',
            name: i18n_1.i18n.translate('xpack.uptime.filterBar.options.idLabel', {
                defaultMessage: 'ID',
            }),
            multiSelect: false,
            options: ids
                ? ids.map(({ key }) => ({
                    value: key,
                    view: key,
                }))
                : [],
            searchThreshold: SEARCH_THRESHOLD,
        },
        {
            type: 'field_value_selection',
            field: 'monitor.name',
            name: i18n_1.i18n.translate('xpack.uptime.filterBar.options.nameLabel', {
                defaultMessage: 'Name',
            }),
            multiSelect: false,
            options: names
                ? names.map((nameValue) => ({ value: nameValue, view: nameValue }))
                : [],
            searchThreshold: SEARCH_THRESHOLD,
        },
        {
            type: 'field_value_selection',
            field: 'url.full',
            name: i18n_1.i18n.translate('xpack.uptime.filterBar.options.urlLabel', {
                defaultMessage: 'URL',
            }),
            multiSelect: false,
            options: ids ? ids.map(({ url }) => ({ value: url, view: url })) : [],
            searchThreshold: SEARCH_THRESHOLD,
        },
        {
            type: 'field_value_selection',
            field: 'url.port',
            name: i18n_1.i18n.translate('xpack.uptime.filterBar.options.portLabel', {
                defaultMessage: 'Port',
            }),
            multiSelect: false,
            options: ports
                ? ports.map((portValue) => ({
                    value: portValue,
                    view: portValue,
                }))
                : [],
            searchThreshold: SEARCH_THRESHOLD,
        },
        {
            type: 'field_value_selection',
            field: 'monitor.type',
            name: i18n_1.i18n.translate('xpack.uptime.filterBar.options.schemeLabel', {
                defaultMessage: 'Scheme',
            }),
            multiSelect: false,
            options: schemes
                ? schemes.map((schemeValue) => ({
                    value: schemeValue,
                    view: schemeValue,
                }))
                : [],
            searchThreshold: SEARCH_THRESHOLD,
        },
    ];
    return (react_1.default.createElement(eui_1.EuiFlexGroup, null,
        react_1.default.createElement(eui_1.EuiFlexItem, { grow: true },
            react_1.default.createElement(eui_1.EuiSearchBar
            // TODO: update typing
            , { 
                // TODO: update typing
                onChange: ({ query }) => {
                    try {
                        let esQuery;
                        if (query && query.text) {
                            esQuery = eui_1.EuiSearchBar.Query.toESQuery(query);
                        }
                        updateQuery(esQuery);
                    }
                    catch (e) {
                        updateQuery(undefined);
                    }
                }, filters: filters, schema: search_schema_1.filterBarSearchSchema }))));
};
