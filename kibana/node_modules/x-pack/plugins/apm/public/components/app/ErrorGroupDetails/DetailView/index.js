"use strict";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eui_1 = require("@elastic/eui");
const eui_theme_light_json_1 = tslib_1.__importDefault(require("@elastic/eui/dist/eui_theme_light.json"));
const i18n_1 = require("@kbn/i18n");
const lodash_1 = require("lodash");
const react_1 = tslib_1.__importDefault(require("react"));
const styled_components_1 = tslib_1.__importDefault(require("styled-components"));
const idx_1 = require("x-pack/plugins/apm/common/idx");
const url_helpers_1 = require("x-pack/plugins/apm/public/components/shared/Links/url_helpers");
const constants_1 = require("x-pack/plugins/apm/public/constants");
const variables_1 = require("../../../../style/variables");
const DiscoverErrorLink_1 = require("../../../shared/Links/DiscoverLinks/DiscoverErrorLink");
const PropertiesTable_1 = require("../../../shared/PropertiesTable");
const tabConfig_1 = require("../../../shared/PropertiesTable/tabConfig");
const Stacktrace_1 = require("../../../shared/Stacktrace");
const ErrorTabs_1 = require("./ErrorTabs");
const StickyErrorProperties_1 = require("./StickyErrorProperties");
const PaddedContainer = styled_components_1.default.div `
  padding: ${variables_1.px(variables_1.units.plus)} ${variables_1.px(variables_1.units.plus)} 0;
`;
const Container = styled_components_1.default.div `
  position: relative;
  border: 1px solid ${eui_theme_light_json_1.default.euiColorLightShade};
  border-radius: ${variables_1.borderRadius};
  margin-top: ${variables_1.px(variables_1.units.plus)};
`;
const HeaderContainer = styled_components_1.default.div `
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: ${variables_1.px(variables_1.units.plus)} ${variables_1.px(variables_1.units.plus)} 0;
  margin-bottom: ${variables_1.px(variables_1.unit)};
`;
function DetailView({ errorGroup, urlParams, location }) {
    if (errorGroup.status !== constants_1.STATUS.SUCCESS) {
        return null;
    }
    const { transaction, error, occurrencesCount } = errorGroup.data;
    if (!error) {
        return null;
    }
    const tabs = ErrorTabs_1.getTabs(error);
    const currentTab = tabConfig_1.getCurrentTab(tabs, urlParams.detailTab);
    return (react_1.default.createElement(Container, null,
        react_1.default.createElement(HeaderContainer, null,
            react_1.default.createElement(eui_1.EuiTitle, { size: "s" },
                react_1.default.createElement("h3", null, i18n_1.i18n.translate('xpack.apm.errorGroupDetails.errorOccurrenceTitle', {
                    defaultMessage: 'Error occurrence'
                }))),
            react_1.default.createElement(DiscoverErrorLink_1.DiscoverErrorLink, { error: error, kuery: urlParams.kuery },
                react_1.default.createElement(eui_1.EuiButtonEmpty, { iconType: "discoverApp" }, i18n_1.i18n.translate('xpack.apm.errorGroupDetails.viewOccurrencesInDiscoverButtonLabel', {
                    defaultMessage: 'View {occurrencesCount} occurrences in Discover',
                    values: { occurrencesCount }
                })))),
        react_1.default.createElement(PaddedContainer, null,
            react_1.default.createElement(StickyErrorProperties_1.StickyErrorProperties, { error: error, transaction: transaction })),
        react_1.default.createElement(eui_1.EuiSpacer, null),
        react_1.default.createElement(eui_1.EuiTabs, null, tabs.map(({ key, label }) => {
            return (react_1.default.createElement(eui_1.EuiTab, { onClick: () => {
                    url_helpers_1.history.replace({
                        ...location,
                        search: url_helpers_1.fromQuery({
                            ...url_helpers_1.toQuery(location.search),
                            detailTab: key
                        })
                    });
                }, isSelected: currentTab.key === key, key: key }, label));
        })),
        react_1.default.createElement(PaddedContainer, null,
            react_1.default.createElement(TabContent, { error: error, currentTab: currentTab }))));
}
exports.DetailView = DetailView;
function TabContent({ error, currentTab }) {
    const codeLanguage = error.service.name;
    const agentName = error.agent.name;
    const excStackframes = idx_1.idx(error, _ => _.error.exception[0].stacktrace);
    const logStackframes = idx_1.idx(error, _ => _.error.exception[0].stacktrace);
    switch (currentTab.key) {
        case ErrorTabs_1.logStacktraceTab.key:
            return (react_1.default.createElement(Stacktrace_1.Stacktrace, { stackframes: logStackframes, codeLanguage: codeLanguage }));
        case ErrorTabs_1.exceptionStacktraceTab.key:
            return (react_1.default.createElement(Stacktrace_1.Stacktrace, { stackframes: excStackframes, codeLanguage: codeLanguage }));
        default:
            const propData = lodash_1.get(error, currentTab.key);
            return (react_1.default.createElement(PropertiesTable_1.PropertiesTable, { propData: propData, propKey: currentTab.key, agentName: agentName }));
    }
}
exports.TabContent = TabContent;
